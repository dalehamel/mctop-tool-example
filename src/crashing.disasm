Disassembly of section .bpf.fn.trace_entry:
trace_entry:
; int trace_entry(struct pt_regs *ctx) { // Line  84
   0:   b7 03 00 00 00 00 00 00         r3 = 0
; struct keyhit_t keyhit = {0}; // Line  89
   1:   6b 3a fc ff 00 00 00 00         *(u16 *)(r10 - 4) = r3
   2:   63 3a f8 ff 00 00 00 00         *(u32 *)(r10 - 8) = r3
   3:   7b 3a f0 ff 00 00 00 00         *(u64 *)(r10 - 16) = r3
   4:   7b 3a e8 ff 00 00 00 00         *(u64 *)(r10 - 24) = r3
   5:   7b 3a e0 ff 00 00 00 00         *(u64 *)(r10 - 32) = r3
   6:   7b 3a d8 ff 00 00 00 00         *(u64 *)(r10 - 40) = r3
   7:   7b 3a d0 ff 00 00 00 00         *(u64 *)(r10 - 48) = r3
   8:   7b 3a c8 ff 00 00 00 00         *(u64 *)(r10 - 56) = r3
   9:   7b 3a c0 ff 00 00 00 00         *(u64 *)(r10 - 64) = r3
  10:   7b 3a b8 ff 00 00 00 00         *(u64 *)(r10 - 72) = r3
  11:   7b 3a b0 ff 00 00 00 00         *(u64 *)(r10 - 80) = r3
  12:   7b 3a a8 ff 00 00 00 00         *(u64 *)(r10 - 88) = r3
  13:   7b 3a a0 ff 00 00 00 00         *(u64 *)(r10 - 96) = r3
  14:   7b 3a 98 ff 00 00 00 00         *(u64 *)(r10 - 104) = r3
  15:   7b 3a 90 ff 00 00 00 00         *(u64 *)(r10 - 112) = r3
  16:   7b 3a 88 ff 00 00 00 00         *(u64 *)(r10 - 120) = r3
  17:   7b 3a 80 ff 00 00 00 00         *(u64 *)(r10 - 128) = r3
; struct value_t *valp, zero = {}; // Line  90
  18:   7b 3a 78 ff 00 00 00 00         *(u64 *)(r10 - 136) = r3
  19:   7b 3a 70 ff 00 00 00 00         *(u64 *)(r10 - 144) = r3
  20:   7b 3a 68 ff 00 00 00 00         *(u64 *)(r10 - 152) = r3
  21:   7b 3a 60 ff 00 00 00 00         *(u64 *)(r10 - 160) = r3
  22:   7b 3a 58 ff 00 00 00 00         *(u64 *)(r10 - 168) = r3
; switch(PT_REGS_IP(ctx)) { // Line  24
  23:   79 12 80 00 00 00 00 00         r2 = *(u64 *)(r1 + 128)
  24:   18 04 00 00 ce 1a d3 1a 00 00 00 00 44 56 00 00         r4 = 94850507807438 ll
  26:   1d 42 05 00 00 00 00 00         if r2 == r4 goto +5
  27:   18 04 00 00 66 0a d3 1a 00 00 00 00 44 56 00 00         r4 = 94850507803238 ll
  29:   5d 42 04 00 00 00 00 00         if r2 != r4 goto +4
; case 0x56441ad30a66ULL: *((uint64_t *)dest) = ctx->si; __asm__ __volatile__("": : :"memory"); return 0; // Line  25
  30:   79 13 68 00 00 00 00 00         r3 = *(u64 *)(r1 + 104)
  31:   05 00 01 00 00 00 00 00         goto +1
; case 0x56441ad31aceULL: *((uint64_t *)dest) = ctx->si; __asm__ __volatile__("": : :"memory"); return 0; // Line  26
  32:   79 13 68 00 00 00 00 00         r3 = *(u64 *)(r1 + 104)
  33:   79 12 80 00 00 00 00 00         r2 = *(u64 *)(r1 + 128)
  34:   18 04 00 00 ce 1a d3 1a 00 00 00 00 44 56 00 00         r4 = 94850507807438 ll
; switch(PT_REGS_IP(ctx)) { // Line  33
  36:   1d 42 06 00 00 00 00 00         if r2 == r4 goto +6
  37:   b7 07 00 00 00 00 00 00         r7 = 0
  38:   18 04 00 00 66 0a d3 1a 00 00 00 00 44 56 00 00         r4 = 94850507803238 ll
  40:   5d 42 03 00 00 00 00 00         if r2 != r4 goto +3
; case 0x56441ad30a66ULL: *((uint8_t *)dest) = ctx->cx; __asm__ __volatile__("": : :"memory"); return 0; // Line  34
  41:   79 17 58 00 00 00 00 00         r7 = *(u64 *)(r1 + 88)
  42:   05 00 01 00 00 00 00 00         goto +1
; case 0x56441ad31aceULL: *((uint8_t *)dest) = ctx->cx; __asm__ __volatile__("": : :"memory"); return 0; // Line  35
  43:   79 17 58 00 00 00 00 00         r7 = *(u64 *)(r1 + 88)
  44:   79 12 80 00 00 00 00 00         r2 = *(u64 *)(r1 + 128)
; switch(PT_REGS_IP(ctx)) { // Line  42
  45:   18 04 00 00 ce 1a d3 1a 00 00 00 00 44 56 00 00         r4 = 94850507807438 ll
  47:   1d 42 06 00 00 00 00 00         if r2 == r4 goto +6
  48:   b7 08 00 00 00 00 00 00         r8 = 0
  49:   18 04 00 00 66 0a d3 1a 00 00 00 00 44 56 00 00         r4 = 94850507803238 ll
  51:   5d 42 03 00 00 00 00 00         if r2 != r4 goto +3
; case 0x56441ad30a66ULL: *((int32_t *)dest) = ctx->ax; __asm__ __volatile__("": : :"memory"); return 0; // Line  43
  52:   79 18 50 00 00 00 00 00         r8 = *(u64 *)(r1 + 80)
  53:   05 00 01 00 00 00 00 00         goto +1
; case 0x56441ad31aceULL: *((int32_t *)dest) = ctx->ax; __asm__ __volatile__("": : :"memory"); return 0; // Line  44
  54:   79 18 50 00 00 00 00 00         r8 = *(u64 *)(r1 + 80)
  55:   bf 72 00 00 00 00 00 00         r2 = r7
; bpf_probe_read(&keyhit.keystr, keysize & READ_MASK, (void *)keystr); // Line  97
  56:   57 02 00 00 7f 00 00 00         r2 &= 127
  57:   bf a6 00 00 00 00 00 00         r6 = r10
  58:   07 06 00 00 80 ff ff ff         r6 += -128
  59:   bf 61 00 00 00 00 00 00         r1 = r6
  60:   85 00 00 00 04 00 00 00         call 4
; valp = ({typeof(keyhits.leaf) *leaf = bpf_map_lookup_elem_(bpf_pseudo_fd(1, -1), &keyhit); if (!leaf) { bpf_map_update_elem_(bpf_pseudo_fd(1, -1), &keyhit, &zero, BPF_NOEXIST); leaf = bpf_map_lookup_elem_(bpf_pseudo_fd(1, -1), &keyhit); if (!leaf) return 0;}leaf;}); // Line  99
  61:   18 11 00 00 ff ff ff ff 00 00 00 00 00 00 00 00         ld_pseudo       r1, 1, 4294967295
  63:   bf 62 00 00 00 00 00 00         r2 = r6
  64:   85 00 00 00 01 00 00 00         call 1
  65:   bf 06 00 00 00 00 00 00         r6 = r0
  66:   55 06 0f 00 00 00 00 00         if r6 != 0 goto +15
  67:   18 11 00 00 ff ff ff ff 00 00 00 00 00 00 00 00         ld_pseudo       r1, 1, 4294967295
  69:   bf a6 00 00 00 00 00 00         r6 = r10
  70:   07 06 00 00 80 ff ff ff         r6 += -128
  71:   bf a3 00 00 00 00 00 00         r3 = r10
  72:   07 03 00 00 58 ff ff ff         r3 += -168
  73:   bf 62 00 00 00 00 00 00         r2 = r6
  74:   b7 04 00 00 01 00 00 00         r4 = 1
  75:   85 00 00 00 02 00 00 00         call 2
  76:   18 11 00 00 ff ff ff ff 00 00 00 00 00 00 00 00         ld_pseudo       r1, 1, 4294967295
  78:   bf 62 00 00 00 00 00 00         r2 = r6
  79:   85 00 00 00 01 00 00 00         call 1
  80:   bf 06 00 00 00 00 00 00         r6 = r0
  81:   15 06 0d 00 00 00 00 00         if r6 == 0 goto +13
; valp->keysize = keysize; // Line 102
  82:   57 07 00 00 ff 00 00 00         r7 &= 255
  83:   7b 76 18 00 00 00 00 00         *(u64 *)(r6 + 24) = r7
; valp->count++; // Line 100
  84:   79 61 00 00 00 00 00 00         r1 = *(u64 *)(r6 + 0)
  85:   07 01 00 00 01 00 00 00         r1 += 1
  86:   7b 16 00 00 00 00 00 00         *(u64 *)(r6 + 0) = r1
; valp->bytecount = bytecount; // Line 101
  87:   67 08 00 00 20 00 00 00         r8 <<= 32
  88:   c7 08 00 00 20 00 00 00         r8 s>>= 32
  89:   7b 86 08 00 00 00 00 00         *(u64 *)(r6 + 8) = r8
; valp->totalbytes += bytecount; // Line 103
  90:   79 61 10 00 00 00 00 00         r1 = *(u64 *)(r6 + 16)
  91:   0f 81 00 00 00 00 00 00         r1 += r8
  92:   7b 16 10 00 00 00 00 00         *(u64 *)(r6 + 16) = r1
; valp->timestamp = bpf_ktime_get_ns(); // Line 104
  93:   85 00 00 00 05 00 00 00         call 5
  94:   7b 06 20 00 00 00 00 00         *(u64 *)(r6 + 32) = r0
; } // Line 108
  95:   b7 00 00 00 00 00 00 00         r0 = 0
  96:   95 00 00 00 00 00 00 00         exit
